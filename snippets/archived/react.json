{
  "hoc_component": {
    "prefix": "hoc",
    "body": [
      "import PropTypes from 'prop-types'",
      "",
      "export default (WrappedComponent) => {",
      "  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "  hocComponent.propTypes = {}",
      "",
      "  return hocComponent",
      "}",
      ""
    ],
    "description": "Higher-order component wrapper"
  },
  "use_debug_value_hook": {
    "prefix": "udbvh",
    "body": "useDebugValue(${1:value});$0",
    "description": "React useDebugValue() hook"
  },
  "use_insertion_effect_hook": {
    "prefix": "uieh",
    "body": ["useInsertionEffect(() => {", "\t$1", "}, [$2]);$0"],
    "description": "React useInsertionEffect() hook"
  },
  "use_sync_external_store_hook": {
    "prefix": "usesh",
    "body": "const ${1:snapshot} = useSyncExternalStore(${2:subscribe}, ${3:getSnapshot}, ${4:getServerSnapshot});$0",
    "description": "React useSyncExternalStore() hook"
  },
  "custom_hook_template": {
    "prefix": "cht",
    "body": [
      "import { useState, useEffect } from 'react';",
      "",
      "export function use${1:Custom}(${2:param}) {",
      "\tconst [${3:state}, ${4:setState}] = useState($5);",
      "\t",
      "\tuseEffect(() => {",
      "\t\t${0}",
      "\t}, [${2}]);",
      "\t",
      "\treturn { ${3}, ${4} };",
      "}"
    ],
    "description": "Custom React hook template with useState and useEffect"
  },
  "typed_custom_hook_template": {
    "prefix": "tcht",
    "body": [
      "interface Use${1:Custom}Return {",
      "\t${2:value}: ${3:type};",
      "\t${0}",
      "}",
      "",
      "export function use${1}(${4:param}: ${5:type}): Use${1}Return {",
      "\tconst [${2}, set${2}] = useState<${3}>();",
      "\t",
      "\treturn { ${2} };",
      "}"
    ],
    "description": "Typed custom React hook with return type interface"
  },
  "prop_types": {
    "prefix": "rpt",
    "body": ["$1.propTypes = {", "\t$2", "}"],
    "description": "Creates empty propTypes declaration"
  },
  "prop_type_array": {
    "prefix": "pta",
    "body": "PropTypes.array",
    "description": "Array prop type"
  },
  "prop_type_array_required": {
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired",
    "description": "Array prop type required"
  },
  "prop_type_bool": {
    "prefix": "ptb",
    "body": "PropTypes.bool",
    "description": "Bool prop type"
  },
  "prop_type_bool_required": {
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired",
    "description": "Bool prop type required"
  },
  "prop_type_func": {
    "prefix": "ptf",
    "body": "PropTypes.func",
    "description": "Func prop type"
  },
  "prop_type_func_required": {
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired",
    "description": "Func prop type required"
  },
  "prop_type_number": {
    "prefix": "ptn",
    "body": "PropTypes.number",
    "description": "Number prop type"
  },
  "prop_type_number_required": {
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired",
    "description": "Number prop type required"
  },
  "prop_type_object": {
    "prefix": "pto",
    "body": "PropTypes.object",
    "description": "Object prop type"
  },
  "prop_type_object_required": {
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired",
    "description": "Object prop type required"
  },
  "prop_type_string": {
    "prefix": "pts",
    "body": "PropTypes.string",
    "description": "String prop type"
  },
  "prop_type_string_required": {
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired",
    "description": "String prop type required"
  },
  "prop_type_node": {
    "prefix": "ptnd",
    "body": "PropTypes.node",
    "description": "Anything that can be rendered: numbers, strings, elements or an array"
  },
  "prop_type_node_required": {
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired",
    "description": "Anything that can be rendered: numbers, strings, elements or an array required"
  },
  "prop_type_element": {
    "prefix": "ptel",
    "body": "PropTypes.element",
    "description": "React element prop type"
  },
  "prop_type_element_required": {
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired",
    "description": "React element prop type required"
  },
  "prop_type_instance_of": {
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0)",
    "description": "Is an instance of a class prop type"
  },
  "prop_type_instance_of_required": {
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired",
    "description": "Is an instance of a class prop type required"
  }
}
