{
  "jsx_element": {
    "prefix": "je",
    "body": [
      "<${1:elementName}>",
      "\t${0}",
      "</${1}>"
    ],
    "description": "JSX element"
  },
  "jsx_element_self_closed": {
    "prefix": "jec",
    "body": "<${1:elementName} />",
    "description": "JSX self-closing element"
  },
  "jsx_elements_map": {
    "prefix": "jem",
    "body": [
      "{${1:array}.map((item) => <${2:elementName} key={item.id}>",
      "\t${0}",
      "</${2}>)}"
    ],
    "description": "JSX map over array with inline return"
  },
  "jsx_elements_map_with_return": {
    "prefix": "jemr",
    "body": [
      "{${1:array}.map((item) => {",
      "\treturn <${2:elementName} key={item.id}>",
      "\t${0}",
      "</${2}>",
      "})}"
    ],
    "description": "JSX map over array with explicit return"
  },
  "react_lazy_import": {
    "prefix": "rli",
    "body": "const ${1:Component} = lazy(() => import('${2:./Component}'));",
    "description": "React lazy import for code splitting"
  },
  "react_suspense": {
    "prefix": "rsu",
    "body": [
      "<Suspense fallback={${1:<div>Loading...</div>}}>",
      "\t${0}",
      "</Suspense>"
    ],
    "description": "React Suspense boundary"
  },
  "react_server_action": {
    "prefix": "rsa",
    "body": [
      "'use server';",
      "",
      "export async function ${1:actionName}(formData: FormData) {",
      "\tconst ${2:data} = formData.get('${3:fieldName}');",
      "\t${0}",
      "}"
    ],
    "description": "React Server Action"
  },
  "react_context_provider": {
    "prefix": "rcp",
    "body": [
      "import { createContext, useContext, useState } from 'react';",
      "",
      "const ${1:My}Context = createContext();",
      "",
      "export function ${1}Provider({ children }) {",
      "\tconst [${2:state}, ${3:setState}] = useState($4);",
      "\t",
      "\treturn (",
      "\t\t<${1}Context.Provider value={{ ${2}, ${3} }}>",
      "\t\t\t{children}",
      "\t\t</${1}Context.Provider>",
      "\t);",
      "}",
      "",
      "export function use${1}() {",
      "\tconst context = useContext(${1}Context);",
      "\tif (!context) {",
      "\t\tthrow new Error('use${1} must be used within ${1}Provider');",
      "\t}",
      "\treturn context;",
      "}"
    ],
    "description": "React Context with Provider and custom hook"
  },
  "typed_react_context_provider": {
    "prefix": "trcp",
    "body": [
      "import { createContext, useContext, ReactNode } from 'react';",
      "",
      "interface ${1:My}ContextValue {",
      "\t${2:value}: ${3:type};",
      "\t${0}",
      "}",
      "",
      "const ${1}Context = createContext<${1}ContextValue | undefined>(undefined);",
      "",
      "interface ${1}ProviderProps {",
      "\tchildren: ReactNode;",
      "}",
      "",
      "export function ${1}Provider({ children }: ${1}ProviderProps) {",
      "\tconst value: ${1}ContextValue = {",
      "\t\t${2}: ${4}",
      "\t};",
      "\t",
      "\treturn <${1}Context.Provider value={value}>{children}</${1}Context.Provider>;",
      "}",
      "",
      "export function use${1}() {",
      "\tconst context = useContext(${1}Context);",
      "\tif (!context) {",
      "\t\tthrow new Error('use${1} must be used within ${1}Provider');",
      "\t}",
      "\treturn context;",
      "}"
    ],
    "description": "TypeScript React Context with Provider and hook"
  }
}
