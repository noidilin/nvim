{
  "importModule": {
    "prefix": "im",
    "body": "import $2 from '$1'"
  },
  "importModuleAs": {
    "prefix": "ima",
    "body": "import $2 as $3 from '$1'"
  },
  "importModuleDestructured": {
    "prefix": "imd",
    "body": "import { $2 } from '$1'"
  },
  "export": {
    "prefix": "e",
    "body": "export $1"
  },
  "exportDefault": {
    "prefix": "ed",
    "body": ["export default $1"]
  },
  "tryCatch": {
    "prefix": "tc",
    "body": "try {\n\t$0\n} catch ($1) {\n\t\n}"
  },
  "tryFinally": {
    "prefix": "tf",
    "body": "try {\n\t$0\n} finally {\n\t\n}"
  },
  "tryCatchFinally": {
    "prefix": "tcf",
    "body": "try {\n\t$0\n} catch ($1) {\n\t\n} finally {\n\t\n}"
  },
  "forOf": {
    "prefix": "fof",
    "body": ["for(let $1 of $2) {\n\t$3\n}"],
    "description": "Iterating over property names of iterable objects"
  },
  "forIn": {
    "prefix": "fin",
    "body": ["for(let $1 in $2) {\n\t$3\n}"],
    "description": "Iterating over property values of iterable objects"
  },
  "destructingObject": {
    "prefix": "dob",
    "body": ["const { $2 } = $1"],
    "description": "Creates and assigns a local variable using object destructing"
  },
  "destructingArray": {
    "prefix": "dar",
    "body": ["const [ $2 ] = $1"],
    "description": "Creates and assigns a local variable using array destructing"
  },
  "constObject": {
    "prefix": "co",
    "body": "const $1 = {\n\t$0\n}"
  },
  "constArray": {
    "prefix": "car",
    "body": "const $1 = [\n\t$0\n]"
  },

  "named.Function": {
    "prefix": "nf",
    "body": "function $1 ($2) {\n\t$0\n}",
    "description": "Named function with arguments"
  },
  "async.Named.Function": {
    "prefix": "anf",
    "body": "async function $1 ($2) {\n\t$0\n}",
    "description": "Async named function with arguments"
  },
  "arrow.Function": {
    "prefix": "afa",
    "body": " ($1) => $0",
    "description": "Arrow function with arguments"
  },
  "async.Arrow.Function": {
    "prefix": "aafa",
    "body": "async ($1) => $0",
    "description": "Arrow async function with arguments"
  },
  "constant.Arrow.Function": {
    "prefix": "caf",
    "body": "const $1 = ($2) => $0",
    "description": "Constant arrow function"
  },
  "constant.Async.Arrow.Function": {
    "prefix": "caaf",
    "body": "const $1 = async ($2) => {\n\t$0\n}",
    "description": "Constant Async Arrow function"
  }
}
