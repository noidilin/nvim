{
  "import_module": {
    "prefix": "im",
    "body": "import $2 from '$1'",
    "description": "Import module"
  },
  "import_module_as": {
    "prefix": "ima",
    "body": "import $2 as $3 from '$1'",
    "description": "Import module as alias"
  },
  "import_module_destructured": {
    "prefix": "imd",
    "body": "import { $2 } from '$1'",
    "description": "Import module with destructuring"
  },
  "export": {
    "prefix": "e",
    "body": "export $1",
    "description": "Export statement"
  },
  "export_default": {
    "prefix": "ed",
    "body": "export default $1",
    "description": "Export default statement"
  },
  "try_catch": {
    "prefix": "tc",
    "body": ["try {", "\t$0", "} catch ($1) {", "\t", "}"],
    "description": "Try-catch block"
  },
  "try_finally": {
    "prefix": "tf",
    "body": ["try {", "\t$0", "} finally {", "\t", "}"],
    "description": "Try-finally block"
  },
  "try_catch_finally": {
    "prefix": "tcf",
    "body": ["try {", "\t$0", "} catch ($1) {", "\t", "} finally {", "\t", "}"],
    "description": "Try-catch-finally block"
  },
  "switch_statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:key}) {",
      "\tcase ${2:value}:",
      "\t\t$0",
      "\t\tbreak;",
      "",
      "\tdefault:",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch statement"
  },
  "for_loop": {
    "prefix": "for",
    "body": ["for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {", "\t$0", "}"],
    "description": "For loop"
  },
  "for_of": {
    "prefix": "fof",
    "body": ["for (let $1 of $2) {", "\t$3", "}"],
    "description": "For-of loop: iterating over property values of iterable objects"
  },
  "for_in": {
    "prefix": "fin",
    "body": ["for (let $1 in $2) {", "\t$3", "}"],
    "description": "For-in loop: iterating over property names of objects"
  },
  "destructuring_object": {
    "prefix": "dob",
    "body": "const { $2 } = $1",
    "description": "Creates and assigns a local variable using object destructuring"
  },
  "destructuring_array": {
    "prefix": "dar",
    "body": "const [ $2 ] = $1",
    "description": "Creates and assigns a local variable using array destructuring"
  },
  "const_object": {
    "prefix": "co",
    "body": ["const $1 = {", "\t$0", "}"],
    "description": "Constant object declaration"
  },
  "const_array": {
    "prefix": "car",
    "body": ["const $1 = [", "\t$0", "]"],
    "description": "Constant array declaration"
  },
  "named_function": {
    "prefix": "nf",
    "body": ["function $1 ($2) {", "\t$0", "}"],
    "description": "Named function with arguments"
  },
  "async_named_function": {
    "prefix": "anf",
    "body": ["async function $1 ($2) {", "\t$0", "}"],
    "description": "Async named function with arguments"
  },
  "arrow_function": {
    "prefix": "afa",
    "body": "($1) => $0",
    "description": "Arrow function with arguments"
  },
  "async_arrow_function": {
    "prefix": "aafa",
    "body": "async ($1) => $0",
    "description": "Async arrow function with arguments"
  },
  "constant_arrow_function": {
    "prefix": "caf",
    "body": "const $1 = ($2) => $0",
    "description": "Constant arrow function"
  },
  "constant_async_arrow_function": {
    "prefix": "caaf",
    "body": ["const $1 = async ($2) => {", "\t$0", "}"],
    "description": "Constant async arrow function"
  }
}
